bookstorage - содержит класс BookStorage, который отвечает за взаимодействие с базой данных.
interfaces -одержит интерфейсы IBookStorage и IBookService, которые работают с книгами
model - содержит класс Book, который представляет собой модель данных книги
service - содержит класс BookService, который реализует логику работы приложения
ui - содержит класс LibraryApp, который отвечает за графический интерфейс пользователя
Main - содержит точку входа в приложение

Точка входа в приложение находится в классе Main:
В методе main создается экземпляр класса LibraryApp,
который представляет собой главное окно приложения,
и вызывается метод setVisible(true), чтобы сделать окно видимым.

Используемые библиотеки:
- java.sql - используется для работы с базой данных (JDBC)
- javax.swing - используется для создания графического интерфейса пользователя (GUI).
- java.awt - спользуется для работы с компонентами GUI, такими как кнопки, текстовые поля и т.д.
- java.util - используется для работы с коллекциями (например, List, ArrayList)

Паттерны проектирования:
- Слоистая архитектура (Layered Architecture):
BookStorage, BookService, LibraryApp
- Интерфейсы:
Интерфейсы IBookStorage и IBookService определяют контракты для работы с книгами.
Это позволяет легко заменять реализации, не изменяя код,
который зависит от этих интерфейсов.
Класс BookService зависит от интерфейса IBookStorage,
что позволяет легко подменять реализацию хранилища данных.
-MVC (Model-View-Controller):
Model: класс Book представляет собой модель данных.
View: класс LibraryApp отвечает за отображение данных пользователю.
Controller: класс BookService выступает в роли контроллера,
который управляет логикой приложения и взаимодействует
 с моделью и представлением.

JFrame - JFrame — это класс из библиотеки Swing в Java,
который используется для создания оконных приложений
с графическим интерфейсом пользователя.
Класс LibraryApp наследуется от JFrame

Интерфейсы (определяют что должно быть сделано)
IBookStorage - определяет контракт для работы с хранилищем книг
IBookService - определяет контракт для сервиса работы с книгами
Это как инструкция для работы с книгами, где перечислено что нужно делать,
 но не объясняется как именно это делать

 Storage = Глупый исполнитель
 Делает только то, что сказали, без вопросов

 Service = Интеллектуальный посредник
 Принимает решения, обрабатывает ошибки, добавляет логику
 Этот BookService работает как «посредник» между вашей программой и базой данных.
 Его задача — обрабатывать запросы про книги (добавить, удалить, найти и т.д.)

 Геттеры (например, getAuthor()) - позволяют читать значения полей
 Сеттеры (например, setId()) - позволяют изменять значения полей

 паттерны:
1)showErrorMessage(String message) -вспомогательный метод для отображения ошибок
 (Реализация паттерна Notification Handler)
2) showSuccessMessage(String message) - Вспомогательный метод отображения успешных операций
( Реализация паттерна Positive Feedback Handler)
